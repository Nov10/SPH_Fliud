#pragma kernel CSMain

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _Light;
bool positionLight;

static const float maxDst = 50;
static const float epsilon = 0.001f;
static const float shadowBias = epsilon * 50;

struct Shape {
    
    float3 position;
    float3 size;
    float3 colour;
    int shapeType;
    int operation;
    float blendStrength;
    int numChildren;
};

StructuredBuffer<Shape> shapes;
StructuredBuffer<float3> pos;
int numShapes;


struct Ray {
    float3 origin;
    float3 direction;
};

float SphereDistance(float3 eye, float3 centre, float radius) {
    return distance(eye, centre) - radius;
}

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0,0,0,1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv,0,1)).xyz;
    direction = mul(_CameraToWorld, float4(direction,0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin,direction);
}

// polynomial smooth min (k = 0.1);
// from https://www.iquilezles.org/www/articles/smin/smin.htm
float4 Blend( float a, float b, float3 colA, float3 colB, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    float blendDst = lerp( b, a, h ) - k*h*(1.0-h);
    float3 blendCol = lerp(colB,colA,h);
    return float4(blendCol, blendDst);
}
float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, float blendStrength)
{
//float4 Combine(float dstA, float dstB, float3 colourA, float3 colourB, int operation, float blendStrength) {
    return Blend(dstA, dstB, colourA, colourB, blendStrength);
    //float dst = dstA;
    //float3 colour = colourA;

    //    float4 blend = Blend(dstA,dstB,colourA,colourB, blendStrength);
    //    dst = blend.w;
    //    colour = blend.xyz;

    //return float4(colour,dst);
}

float GetShapeDistance(float3 shape, float3 eye) {
   
    return SphereDistance(eye, shape, 0.1);
}


float4 SceneInfo(float3 eye) {
    float globalDst = maxDst;
    float3 globalColour = float3(1, 1, 1);

    for (int i = 0; i < numShapes; i++)
    {
        float3 p = pos[i];
        float localDst = GetShapeDistance(shape, eye);
        float3 localColour = shape.colour;

        float4 globalCombined = Combine(globalDst, localDst, globalColour, localColour, shape.blendStrength);
        globalColour = globalCombined.xyz;
        globalDst = globalCombined.w;
    }

    return float4(globalColour, globalDst);
}

float3 EstimateNormal(float3 p) {
    float4 sceneInfoX1 = SceneInfo(float3(p.x + epsilon, p.y, p.z));
    float4 sceneInfoX2 = SceneInfo(float3(p.x - epsilon, p.y, p.z));
    float4 sceneInfoY1 = SceneInfo(float3(p.x, p.y + epsilon, p.z));
    float4 sceneInfoY2 = SceneInfo(float3(p.x, p.y - epsilon, p.z));
    float4 sceneInfoZ1 = SceneInfo(float3(p.x, p.y, p.z + epsilon));
    float4 sceneInfoZ2 = SceneInfo(float3(p.x, p.y, p.z - epsilon));

    float3 normal = float3(
        sceneInfoX1.w - sceneInfoX2.w,
        sceneInfoY1.w - sceneInfoY2.w,
        sceneInfoZ1.w - sceneInfoZ2.w
    );

    return normalize(normal);
}

float CalculateShadow(Ray ray, float dstToShadePoint) {
    return 1;
}
[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = id.xy / float2(width, height) * 2.0f - 1.0f;
    float rayDst = 0.0f;

    Ray ray = CreateCameraRay(uv);
    int count = 0;
    while (rayDst < maxDst)
    {
        float4 sceneInfo = SceneInfo(ray.origin);
        float dst = sceneInfo.w;
            if (dst <= 0.1)
            {
                float3 pointOnSurface = ray.origin + ray.direction * dst;
                float3 normal = EstimateNormal(pointOnSurface - ray.direction * epsilon);
                float3 lightDir = positionLight ? normalize(_Light - ray.origin) : -_Light;
                float lighting = saturate(dot(normal, lightDir));
                float3 col = sceneInfo.xyz;

            // Shadow
                float3 offsetPos = pointOnSurface + normal * shadowBias;
                float3 dirToLight = positionLight ? normalize(_Light - offsetPos) : -_Light;

                ray.origin = offsetPos;
                ray.direction = dirToLight;

                float dstToLight = positionLight ? length(_Light - offsetPos) : maxDst;
                float shadow = CalculateShadow(ray, dstToLight);

                Destination[id.xy] = float4(col * lighting * shadow, 1.0f);

                break;
            }

        ray.origin += ray.direction * dst;
        rayDst += dst;
    }
}